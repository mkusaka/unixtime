{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useInput","defaultValue","useState","value","setValue","defaultTime","moment","unixtime","valueOf","slash","format","heifun","mValue","mSetValue","onChange","e","target","current","handleInputToTimeFormats","App","className","src","logo","alt","type","name","id","onInput","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iMCKrCC,G,MAAW,SAACC,GAA0B,IAAD,EACfC,mBAASD,GADM,mBAClCE,EADkC,KAC3BC,EAD2B,KAEnCC,EAAcC,MAFqB,EAGbJ,mBAAS,CACnCK,SAAUF,EAAYG,UACtBC,MAAOJ,EAAYK,OAAO,uBAC1BC,OAAQN,EAAYK,OAAO,yBANY,mBAGlCE,EAHkC,KAG1BC,EAH0B,KAwBzC,MAAO,CAAED,SAAQT,QAAOW,SANxB,SAAkBC,GAChB,IAAMZ,EAAQY,EAAEC,OAAOb,MACvBC,EAASW,EAAEC,OAAOb,OAXpB,SAAkCY,GAChC,IAAME,EAAUX,KAAQS,GACjBF,EAAU,CACfN,SAAUU,EAAQT,UAClBC,MAAOQ,EAAQP,OAAO,uBACtBC,OAAQM,EAAQP,OAAO,yBAOzBQ,CAAyBf,OAsBdgB,EAhBO,WAAO,IAAD,EACUnB,EAAS,IAArCY,EADkB,EAClBA,OAAQT,EADU,EACVA,MAAOW,EADG,EACHA,SACvB,OACE,yBAAKM,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,GAAGvB,MAAOA,EAAOwB,QAASb,IAC5D,sCAAYF,EAAOL,UACnB,uCAAaK,EAAOH,OACpB,wCAAcG,EAAOD,QACrB,yCAAeL,MAASE,cC9BZoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebdc02dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport moment from \"moment\";\nimport logo from './logo.svg';\nimport './App.css';\n\nconst useInput = (defaultValue: string) => {\n  const [value, setValue] = useState(defaultValue);\n  const defaultTime = moment();\n  const [mValue, mSetValue] = useState({\n    unixtime: defaultTime.valueOf(),\n    slash: defaultTime.format(\"YYYY/MM/DD HH:mm:ss\"),\n    heifun: defaultTime.format(\"YYYY-MM-DD HH:mm:ss\")\n  });\n\n  function handleInputToTimeFormats(e: moment.MomentInput) {\n    const current = moment(+e);\n    return mSetValue({\n      unixtime: current.valueOf(),\n      slash: current.format(\"YYYY/MM/DD HH:mm:ss\"),\n      heifun: current.format(\"YYYY-MM-DD HH:mm:ss\")\n    })\n  }\n\n  function onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    setValue(e.target.value);\n    handleInputToTimeFormats(value);\n  }\n\n  return { mValue, value, onChange }\n}\n\nconst App: React.FC = () => {\n  const { mValue, value, onChange } = useInput(\"\")\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <input type=\"text\" name=\"name\" id=\"\" value={value} onInput={onChange} />\n        <div>unix: {mValue.unixtime}</div>\n        <div>slash: {mValue.slash}</div>\n        <div>heifun: {mValue.heifun}</div>\n        <div>current: {moment().valueOf()}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}